<?xml version="1.0" encoding="utf-8"?>
<!--
	<p>
	MXML component for displaying restaurants in a grid. An ArrayCollection of Restaurant objects is provided to this
	component as it is instantiated.
	</p>
	
	<p>
	This component dispatches RestaurantSelectionEvents as Restaurants are selected.
	These events can be listened for by external code and reacted to (such as capturing the event and displaying
	the description of the restaurant).
	</p>
	
	<p>
	This component can alsobe asked to select a Restaurant from its list at random. After selecting a Restaurant, it
	dispatches a RestaurantSelectionEvent once again so that external observers can stay in sync with this component
	if they want to.
	</p>  
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
   xmlns:view="info.itsrandom.restaurantgrid.view.*">
	
	<mx:Metadata>
		[Event(name="restaurantSelected",type="info.itsrandom.restaurantgrid.events.RestaurantSelectionEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
		   import info.itsrandom.restaurantgrid.RestaurantUtil;
		   import mx.collections.ArrayCollection;
		   import info.itsrandom.restaurantgrid.RestaurantGateway;
			import info.itsrandom.restaurantgrid.Restaurant;
			import info.itsrandom.restaurantgrid.events.RestaurantSelectionEvent;
			
			[Bindable]
			public var gateway : RestaurantGateway = new RestaurantGateway();

         /**
			 * Loads data from gateway when the serviceUrl is set
			 **/			
			public function set serviceUrl(value : String) : void
			{
			   gateway.load(value);
			}
			
			/**
			 * Dispatches a custom event containing a reference to the Restaurant that has been
			 * selected. This event is dispatched when the Restaurant is selected manually in the
			 * grid using the mouse, and also when a Restaurant is chosen from the grid at random.
			 */
			private function dispatchRestaurantSelectionEvent() : void
			{
				var restaurantSelectedEvent : RestaurantSelectionEvent =
					new RestaurantSelectionEvent(this.restaurantGrid.selectedItem as Restaurant);
				
				dispatchEvent(restaurantSelectedEvent);
			}
			
			/**
			 * Called to filter data collection in grid
			 **/
			public function filterByRating(rating : Number) : void
			{
			   //Comparison function used to determine which items in the DataGrid to show
				gateway.restaurants.filterFunction = 
				   function(item : Object) : Boolean 
				   {
				      return (rating == 0) ? true : (item.rating == rating);
			   	};
				
				//Has to be called so that the new filterFunction above can be applied
			   gateway.restaurants.refresh();
			}
			
			/**
			 * Called to randomly select a restaurant for lunch
			 **/
			public function findRandomRestaurant() : void
			{
				var index : Number = RestaurantUtil.generateRandomIndex(gateway.restaurants.length);
				
				this.restaurantGrid.selectedIndex = index;
				this.restaurantGrid.scrollToIndex(index);
				dispatchRestaurantSelectionEvent();
			}			
			
		]]>
	</mx:Script>
	
	<mx:DataGrid id="restaurantGrid" 
		width="100%" 
		allowMultipleSelection="false"
		dataProvider="{gateway.restaurants}" 
		click="dispatchRestaurantSelectionEvent();">
		
		<mx:columns>
	        <mx:DataGridColumn headerText="Name" dataField="name" />
	        <mx:DataGridColumn headerText="Genre" dataField="genre" />
	        <mx:DataGridColumn headerText="Rating" dataField="rating" itemRenderer="{customRatingRenderer}" />
	    </mx:columns>
	</mx:DataGrid>
	
	<mx:Component id="customRatingRenderer">
		<view:RatingItem />
	</mx:Component>
	
</mx:Canvas>